#!/usr/bin/env python

import json
import argparse
import os
import urllib
import urllib2
import shutil
import sys
import process_image
from PIL import Image

# command line arguements
parser = argparse.ArgumentParser(description='Fetch images from Flickr.')
parser.add_argument('-i', action="store", dest="api_key_file", help='file containing Flickr api key', required=True)
parser.add_argument('-p', action="store", dest="path", help='path to store fetched photos', required=True)
parser.add_argument('-l', action='store', dest='length', type=int, help='the size in pixels of the desired square', default=150)

opts = parser.parse_args()

# retrieve the api key from file
key = None
with file(opts.api_key_file) as f:
    key = f.read()

# API constants
API_ENTRY = 'https://api.flickr.com/services/rest/'
INTERESTINGNESS = 'flickr.interestingness.getList'
BASE_URL = API_ENTRY + '?method=' + INTERESTINGNESS + '&api_key=' + key.strip() + '&format=json&nojsoncallback=1'

# retrieve the bucket the photo should be in
def get_bucket(rgb):
    INTERVAL = 17
    r = int(rgb[0] / INTERVAL * INTERVAL)
    g = int(rgb[1] / INTERVAL * INTERVAL)
    b = int(rgb[2] / INTERVAL * INTERVAL)

    dst_folder = opts.path + "r" + str(r) + "g" + str(g) + "b" + str(b) + "/"
    return dst_folder

# save image to cache and update database
def save_img(img_url):
    urllib.urlretrieve(img_url, opts.path + 'tmp.jpg')
    img = Image.open(opts.path + 'tmp.jpg')
    rgb = process_image.get_avg_rgb(img, img.getbbox())
    dst_path = get_bucket(rgb)
    file_num = 0

    # check if folder exists, and if not, create it
    if not os.path.exists(dst_path):
        os.makedirs(dst_path)

    # count number of pictures currently in the folder
    for root, dirs, files in os.walk(dst_path):
        for file in files:
            if file.endswith(".jpg"):
                file_num += 1

    src = opts.path + "tmp.jpg"
    dst = dst_path + str(file_num) + ".jpg"
    shutil.move(src, dst)

    # resize the image
    image = Image.open(dst)
    resized_image = process_image.resize_img(image, opts.length)
    resized_image.save(dst)


# construct photo_url from photo attributes in XML response
def get_photo_urls(decoded):
    urls = []
    total_photos = decoded['photos']['perpage']
    photo_list = decoded['photos']['photo']
    for index in range (0, total_photos):
	attribs = photo_list[index]
	farm_id = str(attribs['farm'])
	server_id = str(attribs['server'])
	id = str(attribs['id'])
	secret = attribs['secret']
	url = 'https://farm' + farm_id + '.staticflickr.com/' + server_id + '/' + id + '_' + secret + '_z.jpg'
	urls.append(url)
    return urls

# fetch interesting images of the day from Flickr
def fetch_images():
    try:
	response = urllib2.urlopen(BASE_URL)
    except urllib2.URLError as e:
	print 'Reason: ', e.reason
    else:
	try:
	    decoded = json.loads(response.read())
	except (ValueError, KeyError, TypeError):
	    print "JSON format error"
	else:
	    urls = get_photo_urls(decoded)
	    return urls

# main
urls = fetch_images()
for url in urls:
    save_img(url)
